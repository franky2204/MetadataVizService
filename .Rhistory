select(ID,tissue,time,CHR:gene)%>%
unique()%>%
separate_wider_regex(AD,
pattern=c(AD_REF = "^\\d+",".",AD_ALT=".*"))%>%
separate_longer_delim(c(ALT,AF,AC_Het,AC_Hom,AD_ALT,VAF),delim = ",")
data_int_normal<-data_int_original%>%
filter(!grepl("minore",Pat))%>%
separate_wider_delim(Pat,
delim = "_",
names = c("ID","tissue","time", "S","L","read","001","trim","end"))%>%
select(ID,tissue,time,CHR:gene)%>%
unique()%>%
separate_wider_regex(AD,
pattern=c(AD_REF = "^\\d+",".",AD_ALT=".*"))%>%
separate_longer_delim(c(ALT,AF,AC_Het,AC_Hom,AD_ALT,VAF),delim = ",")
data_int<-bind_rows(data_int_normal,data_int_special)
data_int$CHR<-gsub("chr","",data_int$CHR)
chr<-c(sort(as.integer(unique(data_int$CHR[data_int$CHR!="X"]))),"X")
data_int$CHR<-factor(data_int$CHR,levels=chr)
levels(data_int$CHR)<-chr
data_int<-arrange(data_int,CHR)%>%
rename("chr"=CHR,
"pos"=POS,
"genome_vers"=HAVANA)
data_int<-arrange(data_int,CHR)%>%
dplyr::rename("chr"=CHR,
"pos"=POS,
"genome_vers"=HAVANA)
data_int$genome_vers<-factor(data_int$genome_vers,levels=c("ensembl","havana","havana_tagene","ensembl_havana"))
genome_verss<-levels(data_int$genome_vers)
data_int<-data_int%>%
group_by(ID,tissue,chr,gene,pos,REF,ALT)%>%
mutate(best=genome_verss[max(as.integer(genome_vers))])%>%
ungroup()%>%
filter(genome_vers==best)%>%
mutate(
sym=ifelse(
best=="havana"| best=="havana_tagene",
"0x25CF",
ifelse(best=="ensembl",
"0x25A1",
"32")))
data_int$DP_INFO<-as.numeric(data_int$DP_INFO)
data_int$AF<-as.numeric(data_int$AF)
data_int$DP_FORMAT<-as.numeric(data_int$DP_FORMAT)
data_int$VAF1<-as.numeric(data_int$VAF1)
data_int$VAF<-as.numeric(data_int$VAF)
data_int$AD_ALT<-as.numeric(data_int$AD_ALT)
data_int$AD_REF<-as.numeric(data_int$AD_REF)
data_int$TYPE<-factor(data_int$TYPE)
data_int$AC_Het<-as.numeric(data_int$AC_Het)
data_int$AC_Hom<-as.numeric(data_int$AC_Hom)
data_int<-merge(data_int%>%select(-gene),panelPavia,by="chr")%>%filter(pos>start&pos<end)%>%select(-start,-end)
View(data_int)
load("/Users/danielavolpatto/Downloads/diametri.RData")
View(dati)
hist(dati$diametro[dati$stabilimento=="A"])
hist(dati$diametro[dati$stabilimento=="A"],breaks=15)
hist(dati$diametro[dati$stabilimento=="B"],breaks=15)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$AllAlright
rv$AllAlright
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rv$colTypes[i]<-NULL
rv$colTypes[i]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
var<-rv$variables[i]
n_fact<-rv$df_pre%>%pull(all_of(var))%>%unique()%>%length()
if(n_fact<10){
levels_ord <- rv$levels[[i]]
if (is.null(levels_ord)) {
levels_non_ord <- unique(na.omit(rv$df_pre[, i]))
}
else {
levels_non_ord <- NULL
}
showModal(
modalDialog(
bucket_list(
header = "Do the factors have a preferential order? (i.e. they are time steps) \n
if so drag them in the right bucket in proper order.",
group_name = paste0("bucket_ord_", last_input),
orientation = "horizontal",
add_rank_list(
text = "Unordered factor detected",
labels = levels_non_ord,
input_id = paste0("factor_nonord_", i)
),
add_rank_list(
text = "Correct order",
labels = levels_ord,
input_id = paste0("factor_ord_", i)
)
),
footer = tagList(
shinyjs::useShinyjs(),
modalButton(paste0("submit_nonord_", i),"Order is not meaningful"),
actionButton(paste0("submit_ord_", i), "Save with this order"),
)
)
)
}
levels_ord <- rv$levels[[i]]
if (is.null(levels_ord)) {
levels_non_ord <- unique(na.omit(rv$df_pre[, i]))
}
levels_non_ord <- unique(na.omit(rv$df_pre[, i]))
runApp()
var<-rv$variables[i]
n_fact<-rv$df_pre%>%pull(all_of(var))%>%unique()%>%length()
n_fact<10
shinyalert(title = "Not quite the choice",
text = paste("It appears that your column contains ",
n_fact,
" different levels when considered as a factor, whereas we can only handle a maximum of 10. \n
You may have inadvertently selected the wrong column type. However, if this isn't the case and the number of values doesn't align with your expectations, consider reviewing your table for any discrepancies and reloading it. \n
Please bear in mind that the system distinguishes values even if they differ only by a capitalization, spacing, or a single letter.",
collapse=""),
confirmButtonCol = "#19323C",
imageHeight = "200",
imageWidth = "300",
size = "m",
imageUrl = "https://i.kym-cdn.com/entries/icons/original/000/018/489/nick-young-confused-face-300x256-nqlyaa.jpg")
rv$colTypes[i]<-""
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rv$levels[[i]]
runApp()
rv$levels[[i]]
runApp()
rv$levels[[i]]
runApp()
print(rv$levels)
print(ncol(rv$df_pre))
shiny::runApp()
print(rv$levels)
print(rv$ncol)
runApp()
print(rv$ncol)
print(rv$levels)
print(rv$levels)
print(rv$levels)
runApp()
print(rv$levels)
print(rv$levels)
rv$levels[1]
runApp()
rv$levels
i
rv$levels[[i]] <- NULL
rv$levels
runApp()
runApp()
runApp()
runApp()
rv$palettes
runApp()
runApp()
shiny::runApp()
runApp()
ls
remove.packages("waffle")
library(req(waffle))
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("shiny")) install.packages("shiny")
if(!require("readr")) install.packages("readr")
if(!require("DT")) install.packages("DT")
if(!require("shinyWidgets")) install.packages("shinyWidgets")
if(!require("shinyjs")) install.packages("shinyjs")
if(!require("ggridges")) install.packages("ggridges")
if(!require("shinyalert")) install.packages("shinyalert")
if(!require("sortable")) install.packages("sortable")
if(!require("waffle")) install.packages("waffle")
source("Libraries.R")
if(!require("devtools")) install.packages("devtools")
runApp()
runApp()
barplot_logic
var<-tissue
var<-"tissue"
ggplot(df_Moia)+
geom_bar(aes(x=all_of(var)),
fill=palettes[var][[1]])+
coord_flip()+
my_theme+
theme(
axis.text.y = element_text(family = "PT Sans",size=15)
)
palettes
ggplot(df_Moia)+
geom_bar(aes(x=all_of(var)),
fill="blue")+
coord_flip()+
my_theme+
theme(
axis.text.y = element_text(family = "PT Sans",size=15)
)
ggplot(df_Moia)+
geom_bar(aes(x=var),
fill="blue")+
coord_flip()+
my_theme+
theme(
axis.text.y = element_text(family = "PT Sans",size=15)
)
runApp()
runApp()
options(shiny.port = 8180)
shinyApp(ui, server)
source("Libraries.R")
source("functions.R")
source("ThemeShiny_QBio.R")
source("Palettes.R")
source("Univar_functs.R")
source("Bivar_functs.R")
source("server.R")
source("ui.R")
options(shiny.port = 8180)
shinyApp(ui, server)
factorial(3*10^7)/(factorial(3*10^7)-40)
factorial(3*10^7)
(3*10^7-40)^40
2^31
log(2^31,40)
log(2^31,40)+40
log(2^31,50)+50
2^100
theme_QBio<-list(includeCSS("Settings.css"),
includeCSS("Components.css"))
setwd(".")
source("Libraries.R")
source("functions.R")
source("ThemeShiny_QBio.R")
source("Palettes.R")
source("Univar_functs.R")
source("Bivar_functs.R")
source("server.R")
source("ui.R")
options(shiny.port = 8180)
options(shiny.host = "0.0.0.0")
shinyApp(ui, server)
shinyApp(ui, server)
runApp()
runApp()
runApp()
input$file$datapath
input$header
input$sep
input$quote
read.delim(input$file$datapath,
header = input$header,
sep = input$sep,
quote = input$quote
)
read.delim(input$file$datapath,
header = FALSE,
sep = input$sep,
quote = input$quote
)
runApp()
runApp()
4%%2
1%%2
3%%2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
rv$levels
runApp()
rv$levels
rv$variables
rv$df_pre
runApp()
rv$levels
rv$levels
replace(rv$levels, i, NULL)
rv$levels[i]<-list(null)
rv$levels[i]<-list(NULL)
rv$levels
Ciao dani tvb
shiny::runApp()
runApp()
runApp()
rv$colTypes[var1]=="logic"&rv$colTypes[var2]=="logic"
rv$colTypes[var1]=="logic"&rv$colTypes[var2]=="logic"
rv$colTypes[var1]=="logic"&rv$colTypes[var2]=="logic"
runApp()
var2<-as.character(var[2])
var1<-as.character(var[1])
var2<-as.character(var[2])
rv$colTypes[var1]=="logic"&rv$colTypes[var2]=="logic"
rv$colTypes[var1]=="logic" &
rv$colTypes[var2]=="factor" & !rv$ord_factor[var2]
rv$colTypes[var1]=="logic" &
rv$colTypes[var2]=="factor" & rv$ord_factor[var2]
rv$colTypes[var1]=="logic" &
rv$colTypes[var2]=="numeric"
rv$colTypes[var1]=="factor" & !rv$ord_factor[var1] &
rv$colTypes[var2]=="factor" & !rv$ord_factor[var2]
rv$colTypes[var1]=="factor" & !rv$ord_factor[var1] &
rv$colTypes[var2]=="factor"& rv$ord_factor[var2]
df
barplot_factornonord_factorord(rv$df_post,var1,var2,rv$palettes)
barplot_factorord_factornonord(rv$df_post,var1,var2,rv$palettes)
rv$df_post%>%
count(.data[[var1]],.data[[var2]])%>%
pivot_wider(names_from = var2,values_from = n)
rv$df_post%>%
count(.data[[var1]],.data[[var2]])%>%
pivot_wider(names_from = var2,values_from = n)
rv$df_post%>%
count(.data[[var1]],.data[[var2]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
setwd(".")
source("Libraries.R")
source("functions.R")
source("ThemeShiny_QBio.R")
source("Palettes.R")
source("Univar_functs.R")
source("Bivar_functs.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as_tibble(
lapply(rv$variables,
change_type,
df = rv$df_pre,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor
),
.name_repair = "universal"
)
lapply(rv$variables,
change_type,
df = rv$df_pre,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor
)
runApp()
lapply(rv$variables,
change_type,
df = rv$df_pre,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor
)
rv$variables
change_type("chr")
df = rv$df_pre
levels = rv$levels
levels
colTypes = rv$colTypes
colTypes
ord_factor = rv$ord_factor
ord_factor
change_type("chr")
change_type("chr")
variable<-"chr"
column_class <- classes[variable]
rv$variables
column_class <- classes[variable]
column_class <- colTypes[variable]
if (column_class == "character") {
as.character(df[,variable])
}
column_class
colTypes[variable]
colTypes
rv$colTypes
runApp()
rv$variables
runApp('Grafici_Shiny.R')
runApp('Grafici_Shiny.R')
runApp()
debugSource("~/Documents/Università/dottorato/Interfaccia grafica/functions.R", echo=TRUE)
runApp()
runApp()
change_type(rv$variables[1],df = rv$df_pre,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor)
variable<-rv$variables[1]
df = rv$df_pre
levels = rv$levels
colTypes = rv$colTypes
ord_factor = rv$ord_factor
colTypes[variable]
variable
colTypes
colTypes[variable]
rv$colTypes
rv$levels
names(rv$colTypes)<-rv$variables
rv$colTypes
column_class <- colTypes[variable]
colTypes[variable]
variable
colTypes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
