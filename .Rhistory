)
}
})
observe({
if (!is.null(rv$df)) {
columnNames <- colnames(rv$df)
for (col in columnNames) {
colTypeInput <- input[[paste0("colType_", col)]]
rv$colTypes[col == columnNames] <- colTypeInput
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
rv<-reactiveValues(df=NULL,
variables=NULL,
colTypes = NULL)
output$fileUploaded <- reactive({
return(!is.null(input$file))
})
outputOptions(output, 'fileUploaded', suspendWhenHidden=FALSE)
observe({
req(input$file)
df<-NULL
ext <- tools::file_ext(input$file$name)
if (ext %in% c("csv", "txt", "tsv") && input$manually == 0) {
read_fun <- switch(ext,
csv = read.csv,
txt = read.table,
tsv = read.table,
default = read.table)
df<-read_fun(input$file$datapath, header = TRUE)
}
else if(input$sep!=""){
tryCatch(
{
df <- read.delim(input$file$datapath,
header = input$header,
sep = input$sep,
quote = input$quote
)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
}
rv$df<-df
rv$variables<-colnames(df)
})
output$df_table <- renderDataTable(DT::datatable(rv$df,
callback = JS(callback),
rownames = FALSE,
options = list(dom='t',ordering=F)
))
observeEvent(input$colnames,{
if(!is.null(rv$df)){
columnNames<-input$colnames
colnames(rv$df)<-columnNames
rv$variables<-columnNames
}
})
output$colnames<-renderPrint({print(rv$variables)})
output$colTypeInputs <- renderUI({
if (!is.null(rv$df)) {
columnNames <- colnames(rv$df)
tagList(
lapply(columnNames, function(col) {
pickerInput(paste0("colType_", col),
label = col,
choices = c("character", "numeric", "integer", "factor"),
options = list(title = "This is a placeholder"))
})
)
}
})
observeEvent(any(paste0("colType_", rv$variables)),
{
if (!is.null(rv$df)) {
columnNames <- colnames(rv$df)
for (col in columnNames) {
colTypeInput <- input[[paste0("colType_", col)]]
rv$colTypes[col == columnNames] <- colTypeInput
}
}
})
}
shinyApp(ui, server)
shinyApp(ui, server)
observeEvent(paste0("colType_", rv$variables),
{
if (!is.null(rv$df)) {
columnNames <- colnames(rv$df)
for (col in columnNames) {
colTypeInput <- input[[paste0("colType_", col)]]
rv$colTypes[col == columnNames] <- colTypeInput
}
}
})
server <- function(input, output) {
rv<-reactiveValues(df=NULL,
variables=NULL,
colTypes = NULL)
output$fileUploaded <- reactive({
return(!is.null(input$file))
})
outputOptions(output, 'fileUploaded', suspendWhenHidden=FALSE)
observe({
req(input$file)
df<-NULL
ext <- tools::file_ext(input$file$name)
if (ext %in% c("csv", "txt", "tsv") && input$manually == 0) {
read_fun <- switch(ext,
csv = read.csv,
txt = read.table,
tsv = read.table,
default = read.table)
df<-read_fun(input$file$datapath, header = TRUE)
}
else if(input$sep!=""){
tryCatch(
{
df <- read.delim(input$file$datapath,
header = input$header,
sep = input$sep,
quote = input$quote
)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
}
rv$df<-df
rv$variables<-colnames(df)
})
output$df_table <- renderDataTable(DT::datatable(rv$df,
callback = JS(callback),
rownames = FALSE,
options = list(dom='t',ordering=F)
))
observeEvent(input$colnames,{
if(!is.null(rv$df)){
columnNames<-input$colnames
colnames(rv$df)<-columnNames
rv$variables<-columnNames
}
})
output$colnames<-renderPrint({print(rv$variables)})
output$colTypeInputs <- renderUI({
if (!is.null(rv$df)) {
columnNames <- colnames(rv$df)
tagList(
lapply(columnNames, function(col) {
pickerInput(paste0("colType_", col),
label = col,
choices = c("character", "numeric", "integer", "factor"),
options = list(title = "This is a placeholder"))
})
)
}
})
observeEvent(paste0("colType_", rv$variables),
{
if (!is.null(rv$df)) {
columnNames <- colnames(rv$df)
for (col in columnNames) {
colTypeInput <- input[[paste0("colType_", col)]]
rv$colTypes[col == columnNames] <- colTypeInput
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
rv<-reactiveValues(df=NULL,
variables=NULL,
colTypes = NULL)
output$fileUploaded <- reactive({
return(!is.null(input$file))
})
outputOptions(output, 'fileUploaded', suspendWhenHidden=FALSE)
observe({
req(input$file)
df<-NULL
ext <- tools::file_ext(input$file$name)
if (ext %in% c("csv", "txt", "tsv") && input$manually == 0) {
read_fun <- switch(ext,
csv = read.csv,
txt = read.table,
tsv = read.table,
default = read.table)
df<-read_fun(input$file$datapath, header = TRUE)
}
else if(input$sep!=""){
tryCatch(
{
df <- read.delim(input$file$datapath,
header = input$header,
sep = input$sep,
quote = input$quote
)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
}
rv$df<-df
rv$variables<-colnames(df)
})
output$df_table <- renderDataTable(DT::datatable(rv$df,
callback = JS(callback),
rownames = FALSE,
options = list(dom='t',ordering=F)
))
observeEvent(input$colnames,{
if(!is.null(rv$df)){
columnNames<-input$colnames
colnames(rv$df)<-columnNames
rv$variables<-columnNames
}
})
output$colnames<-renderPrint({print(rv$variables)})
output$colTypeInputs <- renderUI({
if (!is.null(rv$df)) {
columnNames <- colnames(rv$df)
tagList(
lapply(columnNames, function(col) {
pickerInput(paste0("colType_", col),
label = col,
choices = c("character", "numeric", "integer", "factor"),
options = list(title = "This is a placeholder"))
})
)
}
})
observeEvent(any(paste0("colType_", rv$variables)),
{
if (!is.null(rv$df)) {
columnNames <- colnames(rv$df)
for (col in columnNames) {
colTypeInput <- input[[paste0("colType_", col)]]
rv$colTypes[col == columnNames] <- colTypeInput
}
}
})
}
shinyApp(ui, server)
pnorm(0,4)
pnorm(1.5,0,4)
1-pnorm(3,0,4)
pnorm(1,0,4)-pnorm(-2,0,4)
1-pnorm(3,0,4)/pnorm(6,0,4)
pnorm(1.5,0,2)
1-pnorm(3,0,2)
pnorm(1,0,2)-pnorm(-2,0,2)
1-pnorm(3,0,2)/pnorm(6,0,2)
pnorm(1.5,-1,3)
1-pnorm(3,-1,3)
pnorm(1,-1,3)-pnorm(-2,-1,3)
1-pnorm(1,-1,3)/pnorm(1,-1,3)
1-pnorm(3,-1,3)/pnorm(6,-1,3)
pnorm(1.5,2,6)
pnorm(1,2,6)
1-pnorm(2,2,6)
pnorm(4.5,2,6)-pnorm(3,2,6)
1-pnorm(3,2,6)/pnorm(6,2,6)
pnorm(1,16,4)
pnorm(10.5,16,4)
1-pnorm(17,16,4)
pnorm(17,16,4)-pnorm(13,16,4)
1-pnorm(13,16,4)/pnorm(16,16,4)
pbinom(0,1,0.5)
p_testa<-0.3
p_croce<-1-p_testa
n<-3
size<-8
size_1<-8
size_2<-6
verdi<-7
tot<-11
n<-3
p<-verdi/tot
pbinom(n,size_1,p)
pbinom(n,size_1,p)*p_testa+pbinom(n,size_2,p)*p_croce
n<-7
pbinom(n,size_1,p)*p_testa+pbinom(n,size_2,p)*p_croce
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
n<-3
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
pbinom(n,size_1,p)*p_testa+pbinom(n,size_2,p)*p_croce
pbinom(n,size_1,p)
pbinom(n,size_1,p)*p_testa+pbinom(n,size_2,p)*p_croce
pbinom(n,size_1,p)*p_testa/(pbinom(n,size_1,p)*p_testa+pbinom(n,size_2,p)*p_croce)
p_testa<-0.2
p_croce<-1-p_testa
p_testa<-0.2
p_croce<-1-p_testa
size_1<-8
size_2<-6
verdi<-7
tot<-12
p<-verdi/tot
n<-3
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
p_testa<-0.3
p_croce<-1-p_testa
size_1<-8
size_2<-6
verdi<-7
tot<-11
p<-verdi/tot
n<-3
# prob n palline verdi
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
# prob meno di n palline verdi
pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce
# prob testa dato meno di n
pbinom(n,size_1,p)*p_testa/(pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce)
p_testa<-0.2
p_croce<-1-p_testa
size_1<-8
size_2<-6
verdi<-7
tot<-12
p<-verdi/tot
n<-3
# prob n palline verdi
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
n<-7
# prob n palline verdi
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
n<-3
# prob meno di n palline verdi
pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce
# prob testa dato meno di n
pbinom(n,size_1,p)*p_testa/(pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce)
p_testa<-0.4
p_croce<-1-p_testa
verdi<-9
tot<-11
p<-verdi/tot
n<-3
# prob n palline verdi
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
n<-7
# prob n palline verdi
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
n<-3
# prob meno di n palline verdi
pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce
# prob testa dato meno di n
pbinom(n,size_1,p)*p_testa/(pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce)
size_1<-9
size_2<-7
p_testa<-0.3
verdi<-8
tot<-11
p<-verdi/tot
p_testa<-0.3
p_croce<-1-p_testa
size_1<-9
size_2<-7
verdi<-8
tot<-11
p<-verdi/tot
n<-3
# prob n palline verdi
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
n<-7
# prob n palline verdi
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
n<-3
# prob meno di n palline verdi
pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce
# prob testa dato meno di n
pbinom(n,size_1,p)*p_testa/(pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce)
load("/Users/danielavolpatto/Downloads/atleti.RData")
View(dati)
nrow(data)
nrow(dati)
sum(is.na(dati))
nrow(dati)
mean(dati$index_PRE)
mean(dati$index_PRE,na.rm = TRUE)
sd(dati$index_PRE,na.rm = TRUE)
summry(dati$index_PRE,na.rm = TRUE)
summary(dati$index_PRE,na.rm = TRUE)
boxplot(dati)
nrow(dati)
dim(dati)
rownames(dati)==1:111
boxplot(dati)
t.test(dati$index_POST,dati$index_PRE,alternative = "greater")
t.test(dati$index_POST,dati$index_PRE,alternative = "less")
t.test(dati$index_POST,dati$index_PRE,alternative = "greater")
t.test(dati$index_POST-dati$index_PRE,alternative = "greater")
t.test(dati$index_POST-dati$index_PRE,alternative = "less")
t.test(dati$index_POST-dati$index_PRE,alternative = "greater")
p_testa<-0.3
p_croce<-1-p_testa
size_1<-8
size_2<-6
verdi<-7
tot<-11
p<-verdi/tot
n<-3
# prob n palline verdi
dbinom(n,size_1,p)*p_testa+dbinom(n,size_2,p)*p_croce
# prob meno di n palline verdi
pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce
# prob testa dato meno di n
pbinom(n-1,size_1,p)*p_testa/(pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce)
p_testa<-0.2
p_croce<-1-p_testa
size_1<-8
size_2<-6
verdi<-7
tot<-12
p<-verdi/tot
n<-3
# prob testa dato meno di n
pbinom(n-1,size_1,p)*p_testa/(pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce)
p_testa<-0.4
p_croce<-1-p_testa
size_1<-8
size_2<-6
verdi<-9
tot<-11
p<-verdi/tot
n<-3
# prob testa dato meno di n
pbinom(n-1,size_1,p)*p_testa/(pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce)
p_testa<-0.3
p_croce<-1-p_testa
size_1<-9
size_2<-7
verdi<-8
tot<-11
p<-verdi/tot
n<-3
# prob testa dato meno di n
pbinom(n-1,size_1,p)*p_testa/(pbinom(n-1,size_1,p)*p_testa+pbinom(n-1,size_2,p)*p_croce)
mean<-
p_testa<-0.3
mean<-10
sd<-4
x<-
pnorm()
x<-13
1-pnorm(x,mean,sd)
x_1<-8.5
x_2<-12
pnorm(x_2,mean,sd)-pnorm(x_1,mean,sd)
(1-pnorm(x_2,mean,sd)+pnorm(x_1,mean,sd))/(1-pnorm(8,mean,sd))
pnorm(7,mean,sd)/(1-pnorm(6,mean,sd))
(1-pnorm(12,mean,sd)+pnorm(8.5,mean,sd))/(1-pnorm(8,mean,sd))
1-pnorm(7,mean,sd)/(1-pnorm(6,mean,sd))
pnorm(7,mean,sd)/(1-pnorm(6,mean,sd))-1
pnorm(7,mean,sd)/(1-pnorm(6,mean,sd))-pnorm(6,mean,sd)/(1-pnorm(6,mean,sd))
(1-pnorm(12,mean,sd)+pnorm(8.5,mean,sd))/(1-pnorm(8,mean,sd))
pnorm(x_2,mean,sd)-pnorm(x_1,mean,sd)
1-0.3376322
(1-0.3376322)/(1-pnorm(8,mean,sd))
(1-0.3376322)/(pnorm(8,mean,sd))
(1-0.3376322)/pnorm(8,mean,sd)
(1-0.3376322)
(1-0.3376322)/(1-pnorm(8,mean,sd))
factorial(13)*factorial(5)/(factorial(3)*factorial(15))
factorial(13)*factorial(6)/(factorial(4)*factorial(15))
0.0952381+0.1428571*2
31/(7*15)
(25+36+16)/(15*15)
load("/Users/danielavolpatto/Downloads/atleti-2.RData")
nrow(dati)
sum(is.na(dati))
sd(dati$index_PRE,na.rm = TRUE)
dati[gruppo=="I"]
dati[dati$gruppo=="I"]
dati[dati$gruppo=="I",]
nrow(dati[dati$gruppo=="I",])
nrow(dati[dati$gruppo=="II",])
nrow(dati[dati$gruppo=="T",])
mean(dati[dati$gruppo=="T",2])
mean(dati[dati$gruppo=="I",2])
sd(dati[dati$gruppo=="I",2])
summary(dati[dati$gruppo=="I",2])
quantile(dati[dati$gruppo=="I",2])
quantile(dati[dati$gruppo=="I",2],0.15)
dati[dati$gruppo=="I",2]
quantile(dati[dati$gruppo=="I",2],0.15)
quantile(dati[dati$gruppo=="I",2],0.75)
quantile(dati[dati$gruppo=="I",2],0.85)
boxplot(dati[dati$gruppo=="I",],dati[dati$gruppo=="T",])
dati[dati$gruppo=="I",]
boxplot(dati[dati$gruppo=="I",2],dati[dati$gruppo=="T",2])
t.test(dati[dati$gruppo=="I",2]-dati[dati$gruppo=="T",2],alternative = "greater")
t.test(dati[dati$gruppo=="I",2],dati[dati$gruppo=="T",2],alternative = "greater")
(1-pnorm(3,2,2))*(1-pnorm(3,0,1))
pnorm(2,2,2)-pnorm(1.5,2,2)
pnorm(2.5,2,2)+(1-pnorm(2,0,1))
pnorm(7,2,2)/(1-pnorm(6,2,2))-pnorm(6,2,2)/(1-pnorm(6,2,2))
9/(19*2)
15/(19*2)
dbinom(2,prob=5/20,size=5)
dbinom(2,prob=5/20,size=5)/2+0.3947368/2
0.3947368/(2*0.3292043)
