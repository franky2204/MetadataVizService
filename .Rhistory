ord_factor = rv$ord_factor
)
runApp()
lapply(rv$variables,
change_type,
df = rv$df_pre,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor
)
rv$variables
change_type("chr")
df = rv$df_pre
levels = rv$levels
levels
colTypes = rv$colTypes
colTypes
ord_factor = rv$ord_factor
ord_factor
change_type("chr")
change_type("chr")
variable<-"chr"
column_class <- classes[variable]
rv$variables
column_class <- classes[variable]
column_class <- colTypes[variable]
if (column_class == "character") {
as.character(df[,variable])
}
column_class
colTypes[variable]
colTypes
rv$colTypes
runApp()
rv$variables
runApp('Grafici_Shiny.R')
runApp('Grafici_Shiny.R')
runApp()
debugSource("~/Documents/Università/dottorato/Interfaccia grafica/functions.R", echo=TRUE)
runApp()
runApp()
change_type(rv$variables[1],df = rv$df_pre,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor)
variable<-rv$variables[1]
df = rv$df_pre
levels = rv$levels
colTypes = rv$colTypes
ord_factor = rv$ord_factor
colTypes[variable]
variable
colTypes
colTypes[variable]
rv$colTypes
rv$levels
names(rv$colTypes)<-rv$variables
rv$colTypes
column_class <- colTypes[variable]
colTypes[variable]
variable
colTypes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rv$colTypes
rv$ord_factor
rv$levels
runApp()
rv$levels
rv$ord_factor
!sapply(rv$levels, is.null)
rv$levels
rv$levels
rv$ord_factor
!sapply(rv$levels, is.null)
rv$levels[!rv$ord_factor]<-NULL
rv$levels
runApp()
runApp()
runApp('~/Documents/Università/dottorato/Cancer-Model-Simulation/Bridge/app_bridge.R')
runApp('~/Documents/Università/dottorato/Cancer-Model-Simulation/Bridge/app_bridge.R')
runApp()
runApp()
runApp()
runApp()
runApp()
rv$df_post%>%select(.data[[var2]])
rv$df_post
var2
rv$df_post%>%select(.data[[var2]])
rv$df_post%>%select(all_of(var2))
rv$df_post%>%dplyr::select(.data[[var2]])
runApp()
runApp()
data.frame(
as.array(
summary(rv$df_post%>%dplyr::select(.data[[var]])%>%pull())))%>%
column_to_rownames("Var1")%>%t()
runApp()
runApp()
runApp()
runApp()
req(input$colnames!="")
req(input$colnames)
runApp()
runApp()
runApp()
runApp()
runApp()
rv$levels
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rv$ncol
req(rv$ncol)
input$submit_ord_1
input$submit_ord_2
input$submit_ord_3
input$submit_ord_4
input$submit_ord_5
input$submit_ord_6
input$submit_ord_7
input$submit_ord_8
input$submit_ord_8
input$submit_ord_9
input$submit_ord_10
input$submit_ord_11
input$submit_ord_12
input$submit_ord_3
input$submit_ord_2
input$submit_ord_2
input$submit_ord_3
input$submit_ord_2
input$submit_ord_1
runApp()
input$submit_ord_2
rv$ncol
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
tags$head(
tags$script(
"$(document).on('shiny:inputchanged', function(event) {
if (event.name != 'changed') {
Shiny.setInputValue('changed', event.name);
}
});"
)
),
#theme="Cerulean",
theme_QBio,
#includeCSS("bootstrap.css"),
headerPanel("Preprocessing"),
conditionalPanel(
"!output.AllAlright",
conditionalPanel("!output.fileUploaded",
fluidRow(
fileInput("file", "Upload your file",
multiple = FALSE,
accept = c(
".txt",
".csv",
".tsv"
)
),
align="center",
style = "margin-top: 10%;"
),
p("It is possible to upload table files with separators of your choice in .csv, .tsv or .txt format"),
align="center",
style="width: 80%; margin-left: 10%; margin-right: 10%;"
),
conditionalPanel(
"output.fileUploaded",
fluidRow(
fileInput("file1", "Upload your file",
multiple = FALSE,
accept = c(
".txt",
".csv",
".tsv"
)
),
align="center",
style = "margin-top: 2%;"
),
fluidRow(
column(
offset=1,
width = 2,
actionButton("manually",
label = "Manually adjust",
class = "btn btn-secondary",
style = "margin:1em;"
),
conditionalPanel(
condition = "input.manually%2 !=0",
materialSwitch(
inputId = "header",
label = "Header",
value = FALSE,
status = "default"
),
textInput("sep",
"Separator",
value = "",
width = "50px"
),
prettyRadioButtons("quote",
"Quote",
choices = c(
None = "",
"Double Quote" = '"',
"Single Quote" = "'"
),
selected = '"',
status = "danger"
)
),
uiOutput("colTypeInputs"),
align="left",
),
column(
width=8,
wellPanel(
DTOutput("df_table"),
style="overflow-x: scroll"
),
style = "padding:1em;"
)
)
),
fluidRow(shinyjs::useShinyjs(),
actionButton("load",
label = "Load",
styleclass = "default",
style = "margin:1em;"
),
align="center"
)
),
conditionalPanel(
"input.load!=0 && output.AllAlright",
fluidRow(
column(
width = 2,
uiOutput("variables_input"),
style = "margin:1em;"
),
column(
width = 9,
fluidRow(
column(
width=8,
wellPanel(
plotOutput(outputId = "distPlot"),
style="width:100%;"
)
),
column(
width=4,
fluidRow(
column(
width=10,
p("Pie chart showing the percentage of data subdivided by chr"),
),
column(
width=2,
downloadButton("downloadPlot","")
)
),
fluidRow(
column(width=7,
p("Next:")),
column(width=5,
actionButton("refresh","Other",style="float: right;"))
),
fluidRow(
column(
width=12,
wellPanel(
plotOutput(outputId = "distPlot_next",width="100%",height="100%"),
style="width: 100%; height: 225px"
)
),
style="bottom: 0px;"
),
style="height: 100%;"
)
),
fluidRow(
wellPanel(
tableOutput(outputId = "Table"),
style="max-width:100%;overflow-x: scroll; width: fit-content;"
),
wellPanel(
# verbatimTextOutput()
),
wellPanel(
p("Altre cose altre")
)
)
#style = "margin:1em;"
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
prop_rej<-data.frame(cbind(c(nrow(pvalue_R_all%>%filter(norejected_R=="REJ"))/nrow(pvalue_R_all),nrow(pvalue_R_all%>%filter(norejected_R=="NOREJ"))/nrow(pvalue_R_all))*100,
c("REJ","NOT REJ")))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tagList(
tags$footer(),
htmltools::div(
class = "footerMirri",
htmltools::div(
class = "row",
htmltools::div(
class = "row",
htmltools::div(
class = "col-md-2"),
htmltools::div(
class = "col-md-3",
htmltools::div(
h3("SUS-MIRRI.IT Headquarter"),
p(HTML("University of Turin<br>
Via Verdi 8, 10124, Turin, Italy<br>
Scientific Coordinator: Prof. Cristina Varese"),
style="font-size: 13px; font-family: Sans;")
)
),
htmltools::div(
class = "col-md-5 ",
style="font-size: 13px; font-family: Sans; margin: 5%",
p(class="text-right",
"This web platform was produced under the workpackage 3 of the project “Strengthening the MIRRI Italian Research Infrastructure for Sustainable Bioscience and Bioeconomy” (SUS-MIRRI.IT) and has received funding from the “PNRR M4C2 Iniziativa 3.1 - Infrastrutture di Ricerca (IR), cod. MUR IR0000005”.")
),
htmltools::div(
class = "col-md-2")
),
htmltools::div(
class = "col-md-12 text-center",
style="font-size: 13px; font-family: Sans;",
p("© 2024 - SUS-MIRRI.IT mBRC.")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
