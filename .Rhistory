unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,chr)%>%
pivot_wider(ID,
names_from = ID,
values_from = ID)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,chr)%>%
pivot_wider(ID,
names_from = ID)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,chr)%>%
pivot_wider(ID)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,chr)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,chr)%>%
pivot_wider(ID)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,chr)%>%
pivot_wider(ID,
id_cols=ID)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,chr)%>%
pivot_wider(ID,
names_from = ID,
values_from = position)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,chr)%>%
pivot_wider(ID,
names_from = ID,
values_from = pos)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,pos,chr)%>%
pivot_wider(ID,
names_from = ID,
values_from = pos)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,pos,chr)%>%
pivot_wider(ID,
values_from = pos)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,pos,chr)%>%
pivot_wider(ID,
id_cols = pos)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,pos,chr)%>%
pivot_wider(pos,
id_cols = ID)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,pos,chr)%>%
pivot_wider(names_from = ID,
values_from = pos)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,pos,chr)%>%
pivot_wider(names_from = ID,
values_from = pos,
values_fn = length)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,tissue,gene,pos,chr)%>%
pivot_wider(names_from = ID,
values_from = pos,
values_fn = length,
values_fill = 0)
data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,gene,pos)%>%
pivot_wider(names_from = ID,
values_from = pos,
values_fn = length,
values_fill = 0)
gene_profiles_Moia<-data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.5,AF<0.05)%>%
select(ID,gene,pos)%>%
pivot_wider(names_from = ID,
values_from = pos,
values_fn = length,
values_fill = 0)
View(gene_profiles_Moia)
gene_profiles_Moia<-data_ex_Moia%>%
select(-HAVANA,-EXON_ID)%>%
unique()%>%
filter(VAF>0.2,AF<0.05)%>%
select(ID,gene,pos)%>%
pivot_wider(names_from = ID,
values_from = pos,
values_fn = length,
values_fill = 0)
shiny::runApp()
runApp()
!sapply(rv$levels, is.null)
rv$ord_factor <- !sapply(rv$levels, is.null)
names(rv$ord_factor) <- rv$variables
rv$levels[rv$colTypes == "factor" & !rv$ord_factor] <- lapply(
rv$df %>%
dplyr::select(
all_of(
rv$variables[
which(rv$colTypes == "factor" & rv$ord_factor == FALSE)
]
)
),
function(x){unique(na.omit(x))}
)
rv$colTypes[rv$colTypes == "factor" & sapply(rv$df, function(v) {
length(unique(v))
}) == 2] <- "logic"
rv$ntype_ord <- lapply(
rv$levels[rv$colTypes == "factor" & rv$ord_factor],
length
)
rv$ntype_facets <- lapply(
rv$levels[rv$colTypes == "factor" & !rv$ord_factor],
length
)
!sapply(rv$levels, is.null)
names(rv$ord_factor) <- rv$variables
rv$ord_factor
rv$levels[rv$colTypes == "factor" & !rv$ord_factor] <- lapply(
rv$df %>%
dplyr::select(
all_of(
rv$variables[
which(rv$colTypes == "factor" & rv$ord_factor == FALSE)
]
)
),
function(x){unique(na.omit(x))}
)
rv$levels
rv$colTypes[rv$colTypes == "factor" & sapply(rv$df, function(v) {
length(unique(v))
}) == 2] <- "logic"
rv$ntype_ord <- lapply(
rv$levels[rv$colTypes == "factor" & rv$ord_factor],
length
)
rv$ntype_facets <- lapply(
rv$levels[rv$colTypes == "factor" & !rv$ord_factor],
length
)
rv$ndata <- nrow(rv$df)
rv$df <- as_tibble(
lapply(rv$variables,
change_type,
df = rv$df,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor
),
.name_repair = "universal"
)
colnames(rv$df) <- rv$variables
rv$colTypes <- factor(rv$colTypes,
levels = c("character", "logic", "factor", "numeric")
)
palettes_factord<- mapply(moma.colors,
possible_palettes_gradient[1:sum(rv$ord_factor)],
n=rv$ntype_ord,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
names(palettes_factord)<-names(rv$colTypes)[rv$ord_factor]
palettes_factnonord<-mapply(moma.colors,
possible_palettes_facets[1:sum(!rv$ord_factor[rv$colTypes=="factor"])],
n=rv$ntype_facets,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
names(palettes_factnonord)<-names(rv$colTypes)[!rv$ord_factor&rv$colTypes=="factor"]
palettes_logic<-possible_palettes_neutral[1:sum(rv$colTypes=="logic")]
names(palettes_logic)<-names(rv$colTypes)[rv$colTypes=="logic"]
rv$palettes<-append(append(palettes_factnonord,palettes_factord),palettes_logic)
rv$palettes
var<-names(sort(rv$colTypes[input$var]))
var
var<-"TERAPIA"
var
var[rv$colTypes[var]=="factor"]<-names(sort(rv$ord_factor[names(rv$colTypes[var][rv$colTypes[var]=="factor"])]))
var
var<-as.character(input$var[1])
var<-as.character(input$var[1])
var
var<-"TERAPIA"
barplot_logic(rv$df,var,rv$palettes)
barplot_logic
palettes[var][[1]]
rv$palettes[var[[1]]]
rv$ntype_facets
barplot_logic(rv$df,var,rv$palettes)
runApp()
rv$plot
rv$colTypes
runApp()
rv$plot
var
waffle_factor_nonord(rv$df,var,rv$palettes,rv$ndata,rv$levels)
barplot_factor_nonord(rv$df,var,rv$palettes,rv$levels
barplot_factor_nonord(rv$df,var,rv$palettes,rv$levels)
barplot_factor_nonord(rv$df,var,rv$palettes,rv$levels)
rv$df%>%count(.data[[var]])%>%column_to_rownames(var)%>%t()
rv$df%>%count(.data[[var]])
rv$df%>%count(.data[[var]])%>%column_to_rownames(var)%>%t()
rv$df%>%count(.data[[var]])
rv$df.[[var]]
rv$df.data[[var]]
rv$df[[var]]
all(!i.na(rv$df[[var]]))
all(!is.na(rv$df[[var]]))
rv$table%>%t()
rv$table<-rv$df%>%count(.data[[var]])
rv$table%>%t()
rv$table<-rv$df%>%count(.data[[var]])
rv$table
rv$table.data[[var]][is.na(rv$table)]
rv$table.data[[var]]
rv$table<-rv$df%>%count(.data[[var]])
rv$table.data[[var]]
rv$table[is.na(rv$table)]
rv$table[is.na(rv$table)]<-"NA"
rv$table<-rv$df%>%count(.data[[var]])
rv$table<-rv$table%>%t()
rownames(rv$table)<-c(var,"Number \n of samples")
rv$table
runApp()
runApp()
runApp()
waffle_factor_nonord(rv$df,var,rv$palettes,rv$ndata,rv$levels)
barplot_factor_nonord(rv$df,var,rv$palettes,rv$levels)
rv$table<-rv$df%>%count(.data[[var]])
rv$table
rv$table<-rv$table%>%column_to_rownames(var)%>%t()
rv$table<-rv$table%>%t()
rv$table
rownames(rv$table)<-c(var,"Number \n of samples")
colnames(rv$table)<-NULL
rv$table
rv$table<-rv$df%>%count(.data[[var]])
rv$table
rv$table<-rv$table%>%t()
rv$table
rv$table<-rv$df%>%count(.data[[var]])
rv$table<-rv$table%>%t()%>%filter(n)
rv$table<-rv$table%>%select(n)%>%t()
rv$table
colnames(rv$table)<-as.character(rv$levels[var])
rv$levels[var]
as.character(rv$levels[var])
colnames(rv$table)<-c(rv$levels[var],"NA")
rv$table
rv$levels[var]
c(rv$levels[var],"NA")
colnames(rv$table)<-c(rv$levels[[var]],"NA")
rv$table
var<-c("TERAPIA","SEX")
rv$table<-rv$df%>%
count(.data[[var1]],.data[[var2]])%>%
pivot_wider(names_from = var2,values_from = n)
var1<-as.character(var[1])
var2<-as.character(var[2])
rv$table<-rv$df%>%
count(.data[[var1]],.data[[var2]])%>%
pivot_wider(names_from = var2,values_from = n)
rv$table
rv$variables
var<-c("TERAPIA","CATEGORIA")
var1<-as.character(var[1])
var2<-as.character(var[2])
rv$plot<-list(barplot_logic_logic(rv$df,var1,var2,rv$palettes),
barplot_logic_logic(rv$df,var2,var1,rv$palettes))
rv$plot
rv$table<-rv$df%>%
count(.data[[var1]],.data[[var2]])%>%
pivot_wider(names_from = var2,values_from = n)
rv$table
rv$table<-rv$table%>%filter(n)%>%t()
rv$table<-rv$table%>%filter(-var1)%>%t()
rv$table<-rv$table%>%select(-var1)%>%t()
rv$table
rv$table<-rv$df%>%
count(.data[[var1]],.data[[var2]])%>%
pivot_wider(names_from = var2,values_from = n)
rv$table<-rv$table%>%select(-all.of(var1))%>%t()
rv$table<-rv$table%>%select(-all_of(var1))%>%t()
colnames(rv$table)<-c(rv$levels[[var]],"NA")
colnames(rv$table)<-c(rv$levels[[var1]],"NA")
runApp()
runApp()
rv$colTypes
rv$levels
rv$variables
colnames(rv$df) <- rv$variables
names(rv$levels) <- rv$variables
rv$ord_factor <- !sapply(rv$levels, is.null)
rv$ord_factor
runApp()
colnames(rv$df) <- rv$variables
rv$df
names(rv$levels) <- rv$variables
rv$levels
rv$ord_factor <- !sapply(rv$levels, is.null)
rv$ord_factor
names(rv$ord_factor) <- rv$variables
rv$ord_factor
rv$levels[rv$colTypes == "factor" & !rv$ord_factor] <- lapply(
rv$df %>%
dplyr::select(
all_of(
rv$variables[
which(rv$colTypes == "factor" & rv$ord_factor == FALSE)
]
)
),
function(x){unique(na.omit(x))}
)
rv$levels
rv$colTypes[rv$colTypes == "factor" & sapply(rv$df, function(v) {
length(unique(v))
}) == 2] <- "logic"
rv$colTypes
rv$ntype_ord <- lapply(
rv$levels[rv$colTypes == "factor" & rv$ord_factor],
length
)
rv$ntype_facets <- lapply(
rv$levels[rv$colTypes == "factor" & !rv$ord_factor],
length
)
rv$ndata <- nrow(rv$df)
rv$df <- as_tibble(
lapply(rv$variables,
change_type,
df = rv$df,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor
),
.name_repair = "universal"
)
rv$df
colnames(rv$df) <- rv$variables
rv$df
rv$colTypes
rv$colTypes <- factor(rv$colTypes,
levels = c("character", "logic", "factor", "numeric")
)
rv$colTypes
palettes_factord<- mapply(moma.colors,
possible_palettes_gradient[1:sum(rv$ord_factor)],
n=rv$ntype_ord,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
palettes_factord
names(palettes_factord)<-names(rv$colTypes)[rv$ord_factor]
palettes_factnonord<-mapply(moma.colors,
possible_palettes_facets[1:sum(!rv$ord_factor[rv$colTypes=="factor"])],
n=rv$ntype_facets,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
names(palettes_factnonord)<-names(rv$colTypes)[!rv$ord_factor&rv$colTypes=="factor"]
palettes_logic<-possible_palettes_neutral[1:sum(rv$colTypes=="logic")]
names(palettes_logic)<-names(rv$colTypes)[rv$colTypes=="logic"]
rv$palettes<-append(append(palettes_factnonord,palettes_factord),palettes_logic)
rv$palettes
# crea le variabili da mostrare per la scelta
output$variables_input<-renderUI({
if(input$load!=0){
req(rv$variables,rv$colTypes)
tagList(
checkboxGroupInput(
inputId = "var",
label = "Chose the variables you want to explore",
choices = rv$variables[rv$colTypes!="character"],
inline = FALSE
))
}
})
output$variables_input
rv$plot_n
var<-names(sort(rv$colTypes[input$var]))
var
var<-"TERAPIA"
rv$colTypes[var]=="logic"
rv$colTypes[var]=="factor"&!rv$ord_factor[var]
rv$plot<-list(waffle_factor_nonord(rv$df,var,rv$palettes,rv$ndata,rv$levels),
barplot_factor_nonord(rv$df,var,rv$palettes,rv$levels)
)
rv$table<-rv$df%>%count(.data[[var]])
if(all(!is.na(rv$df[[var]]))){
rv$table<-rv$table%>%column_to_rownames(var)%>%t()
rownames(rv$table)<-"Number \n of samples"
}
else{
all(!is.na(rv$df[[var]]))
rv$table<-rv$table%>%filter(n)%>%t()
rv$table
rv$table<-rv$table%>%select(n)%>%t()
colnames(rv$table)<-c(rv$levels[[var]],"NA")
rownames(rv$table)<-"Number \n of samples"
rv$table
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rv$df
runApp()
runApp()
lapply(rv$df,is.null)
lapply(rv$df,sapply(.,is.null))
mapply(rv$df,is.null)
rv$df
lapply(rv$df,function(col){
lapply(col,is.null)
})
lapply(rv$df,function(col){
sapply(col,is.null)
})
lapply(rv$df,function(col){
sapply(col,is.na)
})
na<-sapply(col,is.na)
lapply(rv$df,function(col){
return(all(sapply(col,is.na)))
})
which(lapply(rv$df,function(col){
return(all(sapply(col,is.na)))
}))
lapply(rv$df,function(col){
return(all(sapply(col,is.na)))
})
which(sapply(rv$df,function(col){
return(all(sapply(col,is.na)))
}))
colnames(rv$df) <- rv$variables
which(sapply(rv$df,function(col){
return(all(sapply(col,is.na)))
}))
runApp()
runApp()
load("/Users/danielavolpatto/Downloads/prodotto.RData")
View(dati)
dati$preferenza=="Sperimentale"
sum(dati$preferenza=="Sperimentale")
binom.test(sum(dati$preferenza=="Sperimentale"),nrow(dati),0.5,alternative = "greater")
load("/Users/danielavolpatto/Downloads/ricerca.RData")
sum(dati$algoritmo=="alg_A")
sum(dati$algoritmo=="alg_B")
mean(dati$tempo[dati$algoritmo=="alg_B"])
mean(dati$tempo[dati$algoritmo=="alg_A"])
sd(dati$tempo[dati$algoritmo=="alg_A"])
quantile(dati$tempo[dati$algoritmo=="alg_A"],0.9)
quantile(dati$tempo[dati$algoritmo=="alg_A"],0.95)
boxplot(dati$tempo[dati$algoritmo=="alg_A"],dati$tempo[dati$algoritmo=="alg_B"])
t.test(dati$tempo[dati$algoritmo=="alg_A"],
conf.level = 0.99)
t.test(dati$tempo[dati$algoritmo=="alg_B"],
conf.level = 0.99)
View(dati)
