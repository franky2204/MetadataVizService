runApp()
runApp()
runApp()
source("Layout/ThemeShiny_QBio.R")
setwd(".")
source("Layout/Libraries.R")
runApp()
runApp()
getwd()
runApp()
setwd(".")
getwd()
setwd(".")
getwd()
runApp()
setwd(".")
#source("Libraries.R")
source("functions.R")
getwd()
#source("Libraries.R")
source("functions.R")
source("Layout/ThemeShiny_QBio.R")
source("Layout/ThemeShiny_QBio.R")
setwd(".")
#source("Libraries.R")
source("functions.R")
source("Layout/ThemeShiny_QBio.R")
if(!require("shiny")) install.packages("shiny", dependencies = TRUE)
#source("Libraries.R")
source("functions.R")
source("Layout/ThemeShiny_QBio.R")
source("Layout/ThemeShiny_QBio.R")
runApp('Layout')
setwd(".")
source("Libraries.R")
source("functions.R")
source("Layout/ThemeShiny_QBio.R")
source("Palettes.R")
source("Univar_functs.R")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
headerPanel<-function (title="", windowTitle = title) {
tagList(tags$head(tags$title(windowTitle)),
htmltools::div(class = "headerMirri",
htmltools::img(src = knitr::image_uri("ShinyMirriTemplate/Loghi/loghi_Mirri.png"),
alt = 'logo',
style = "float: left;
padding-bottom:5px;
padding-top:5px;
padding-left:15px;
height:40px"),
h1(title,style="float: right;
padding-bottom:5px;
padding-top:5px;
margin: 10px;
padding-right:15px;")
)
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
options(warn=1)
runApp()
runApp()
runApp()
runApp()
rv$variables
colnames(rv$df_pre)
names(rv$levels)
rv$variables
rv$levels
names(rv$ord_factor)
rv$variables
lapply(
rv$df_pre %>%
dplyr::select(
all_of(
rv$variables[
which(rv$colTypes == "factor" & rv$ord_factor == FALSE)
]
)
),
function(x){unique(na.omit(x))}
)
as_tibble(
lapply(rv$variables,
change_type,
df = rv$df_pre,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor
),
.name_repair = "universal"
)
colnames(rv$df_post)
rv$variables
any(sapply(rv$df_post,function(col){
return(all(sapply(col,is.na)))
}))
rv$colTypes
factor(rv$colTypes,
levels = c("character", "logic", "factor", "numeric")
)
palettes_factord
names(rv$colTypes)[rv$ord_factor]
sum(rv$ord_factor)
possible_palettes_gradient[1:sum(rv$ord_factor)]
mapply(moma.colors,
possible_palettes_gradient[1:sum(rv$ord_factor)],
n=rv$ntype_ord,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
possible_palettes_gradient[1:sum(rv$ord_factor)]
rv$ntype_ord
names(palettes_factord)<-names(rv$colTypes)[rv$ord_factor]
rv$ntype_ord
rv
rv$levels[rv$colTypes == "factor" & rv$ord_factor]
rv$ord_factor
rv$colTypes == "factor"
rv$colTypes
sapply(rv$df_pre, function(v) {
length(unique(v))
}
sapply(rv$df_pre, function(v) {
sapply(rv$df_pre, function(v) {
length(unique(v))
}
a
sapply(rv$df_pre, function(v) {
length(unique(v))
})
rv$colTypes[rv$colTypes == "factor" & rv$ord_factor & sapply(rv$df_pre, function(v) {
length(unique(v))
}) == 2] <- "logic"
rv$ntype_ord <- lapply(
rv$levels[rv$colTypes == "factor" & rv$ord_factor],
length
)
rv$ntype_facets <- lapply(
rv$levels[rv$colTypes == "factor" & !rv$ord_factor],
length
)
rv$ndata <- nrow(rv$df_pre)
rv$df_post <- as_tibble(
lapply(rv$variables,
change_type,
df = rv$df_pre,
levels = rv$levels,
colTypes = rv$colTypes,
ord_factor = rv$ord_factor
),
.name_repair = "universal"
)
colnames(rv$df_post) <- rv$variables
if(any(sapply(rv$df_post,function(col){
return(all(sapply(col,is.na)))
}))){
wrong_type<-which(sapply(rv$df_post,function(col){
return(all(sapply(col,is.na)))
}))
shinyalert(title = "Are you sure?",
text = paste("You probably have incorrectly assigned the variable type of",names(wrong_type),". \n Please select another variable type."),
imageUrl = "https://media.tenor.com/wy2zHeWyf2gAAAAe/side-eye-dog-suspicious-look.png",
imageHeight = "200",
imageWidth = "300",
confirmButtonCol = "#19323C")
rv$AllAlright<-FALSE
rv$levels[!rv$ord_factor]<-list(NULL)
rv$colTypes[rv$colTypes=="logic"]<-"factor"
rv$colTypes[names(wrong_type)]<-""
}
rv$AllAlright<-TRUE
rv$colTypes <- factor(rv$colTypes,
levels = c("character", "logic", "factor", "numeric")
)
palettes_factord<- mapply(moma.colors,
possible_palettes_gradient[1:sum(rv$ord_factor)],
n=rv$ntype_ord,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
palettes_factord
rv$colTypes
runApp()
runApp()
runApp()
mapply(moma.colors,
possible_palettes_gradient[1:sum(rv$ord_factor)],
n=rv$ntype_ord,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
names(rv$colTypes)[rv$ord_factor]
length(rv$ord_factor)>0
rv$ord_factor
length(rv$colTypes[rv$ord_factor])>0
length(rv$colTypes[!rv$ord_factor&rv$colTypes=="factor"])>0
rv$colTypes[!rv$ord_factor&rv$colTypes=="factor"]
palettes_factord<- mapply(moma.colors,
possible_palettes_gradient[1:sum(rv$ord_factor)],
n=rv$ntype_ord,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
if(length(rv$colTypes[rv$ord_factor])>0){
names(palettes_factord)<-names(rv$colTypes)[rv$ord_factor]
}
palettes_factnonord<-mapply(moma.colors,
possible_palettes_facets[1:sum(!rv$ord_factor[rv$colTypes=="factor"])],
n=rv$ntype_facets,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
if(length(rv$colTypes[!rv$ord_factor&rv$colTypes=="factor"])>0){
names(palettes_factnonord)<-names(rv$colTypes)[!rv$ord_factor&rv$colTypes=="factor"]
}
palettes_logic<-possible_palettes_neutral[1:sum(rv$colTypes=="logic")]
if(length(rv$colTypes[rv$colTypes=="logic"])>0){
names(palettes_logic)<-names(rv$colTypes)[rv$colTypes=="logic"]
}
rv$palettes<-append(append(palettes_factnonord,palettes_factord),palettes_logic)
rv$palettes
runApp()
runApp()
palettes_factord<- mapply(moma.colors,
possible_palettes_gradient[1:sum(rv$ord_factor)],
n=rv$ntype_ord,
SIMPLIFY = FALSE,
USE.NAMES = FALSE)
length(rv$colTypes[rv$ord_factor])>0
rv$colTypes
rv$colTypes[rv$ord_factor]
palettes_factord
rv$colTypes[rv$ord_factor & rv$colTypes=="factor"]
length(rv$colTypes[rv$ord_factor & rv$colTypes=="factor"])>0
runApp()
runApp()
runApp()
pnorm(2,0.2,1)
pnorm(q=2,mean=0.2,sd=1)
pexp(2,1)
1-pexp(2,1)
pnorm(q=2,mean=0.2,sd=1)*pexp(2,1)
1-pnorm(q=2,mean=0.2,sd=1)*pexp(2,1)
pnorm(q=1,mean=0.2,sd=1)*(1-pexp(1,1))
pnorm(q=1,mean=0.2,sd=1)*(1-pexp(1,1))+pexp(1,1)
1/8
1/4
1/4-1/32
(1/4-1/32)*2
(1/4)/((1/4-1/32)*2)
pnorm(q=1,mean=0.2,sd=1)
1-pnorm(q=2,mean=0.2,sd=1)
1-(pnorm(q=2,mean=0.2,sd=1))^3
(pnorm(q=2,mean=0.2,sd=1))^3
1-(pnorm(q=2,mean=0.2,sd=1))^3
1-(pnorm(q=2,mean=0.2,sd=1))^2
1-(pnorm(q=2,mean=0.2,sd=1))^3
(pnorm(q=2,mean=0.2,sd=1))^3
(pnorm(q=2,mean=0.2,sd=1))^2
(pnorm(q=2,mean=0.2,sd=1))^3
(pnorm(q=2,mean=0.2,sd=1))^4
(pnorm(q=2,mean=0.2,sd=1))^3
1-pnorm(0.7,0.2,1)
1-(pnorm(q=2,mean=0.2,sd=1))^3
(0.6^3)*0.4
15*(0.6^4)*(0.4^2)
15*(0.6^4)*(0.4^3)
2*(0.6^4)*(0.4^3)
choose(10,5)
choose(10,5)*(0.6^5)*(0.4^5)
pnorm(2,0.2,1)
pnorm(2,0.2,1)^3
1-pnorm(2,0.2,1)^3
setwd(".")
source("Libraries.R")
source("functions.R")
callback<-"var colnames = table.columns().header().to$().map(function() {
return this.innerHTML;
}).get();
Shiny.onInputChange('colnames', colnames);
table.on('dblclick.dt', 'thead th', function(e) {
var $th = $(this);
var index = $th.index();
var colname = $th.text(), newcolname = colname;
var $input = $('<input type=\"text\">')
$input.val(colname);
$th.empty().append($input);
$input.on('change', function() {
newcolname = $input.val();
if(newcolname != colname){
$(table.column(index).header()).text(newcolname);
colnames[index] = newcolname;
Shiny.onInputChange('colnames', colnames);
}
$input.remove();
}).on('blur', function() {
$(table.column(index).header()).text(newcolname);
$input.remove();
});
})"
runApp()
runApp()
theme_QBio
upload_page<-conditionalPanel("!output.fileUploaded",
fluidRow(
fileInput("file", "Upload your file",
multiple = FALSE,
accept = c(
".txt",
".csv",
".tsv"
)
),
align="center",
style = "margin-top: 10%;"
),
p("It is possible to upload table files with separators of your choice in .csv, .tsv or .txt format"),
align="center",
style="width: 80%; margin-left: 10%; margin-right: 10%;"
)
table_page<-conditionalPanel(
"output.fileUploaded",
fluidRow(
fileInput("file1", "Upload another file",
multiple = FALSE,
accept = c(
".txt",
".csv",
".tsv"
)
),
align="center",
style = "margin-top: 2%;"
),
fluidRow(
column(
offset=1,
width = 2,
actionButton("manually",
label = "Manually adjust",
class = "btn btn-secondary",
style = "margin:1em;"
),
conditionalPanel(
condition = "input.manually%2 !=0",
materialSwitch(
inputId = "header",
label = "Header",
value = FALSE
),
textInput("sep",
"Separator",
value = "",
width = "50px"
),
prettyRadioButtons("quote",
"Quote",
choices = c(
None = "",
"Double Quote" = '"',
"Single Quote" = "'"
),
selected = '"'
)
),
uiOutput("colTypeInputs"),
align="left",
),
column(
width=8,
wellPanel(
DTOutput("df_table"),
style="overflow-x: scroll"
),
style = "padding:1em;"
)
)
)
runApp()
runApp()
load_button<-conditionalPanel(
"!output.AllAlright",
upload_page,
table_page,
fluidRow(shinyjs::useShinyjs(),
actionButton("load",
label = "Load",
styleclass = "default",
style = "margin:1em;"
),
align="center"
)
)
runApp()
runApp()
runApp()
load_button<-fluidRow(shinyjs::useShinyjs(),
actionButton("load",
label = "Load",
styleclass = "default",
style = "margin:1em;"
),
align="center"
)
runApp()
callback<-c("var colnames = table.columns().header().to$().map(function() {",
"return this.innerHTML;",
"}).get();",
"Shiny.onInputChange('colnames', colnames);",
"table.on('dblclick.dt', 'thead th', function(e) {",
"var $th = $(this);",
"var index = $th.index();",
"var colname = $th.text(), newcolname = colname;",
"var $input = $('<input type=\"text\">')",
"$input.val(colname);",
"$th.empty().append($input);",
"$input.on('change', function() {",
"newcolname = $input.val();",
"if(newcolname != colname){",
"$(table.column(index).header()).text(newcolname);",
"colnames[index] = newcolname;",
"Shiny.onInputChange('colnames', colnames);",
"}",
"$input.remove();",
"}).on('blur', function() {",
"$(table.column(index).header()).text(newcolname);",
"$input.remove();",
"});",
"})")
runApp()
runApp()
rv$variables[i]
View(rv)
rv$df_pre
i
rv$df_pre%>%pull(i)%>%unique()%>%length()
rv$df_pre%>%pull(i)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
